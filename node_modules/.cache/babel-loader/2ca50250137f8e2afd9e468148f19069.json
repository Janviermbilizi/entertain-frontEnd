{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.autocompleteOptions = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _constants = _interopRequireDefault(require(\"./constants\"));\n\nvar _idgen = _interopRequireDefault(require(\"./idgen\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar Autocomplete = function Autocomplete(_ref) {\n  var className = _ref.className,\n      title = _ref.title,\n      icon = _ref.icon,\n      s = _ref.s,\n      m = _ref.m,\n      l = _ref.l,\n      xl = _ref.xl,\n      id = _ref.id,\n      options = _ref.options,\n      rest = _objectWithoutProperties(_ref, [\"className\", \"title\", \"icon\", \"s\", \"m\", \"l\", \"xl\", \"id\", \"options\"]);\n\n  var autocompleteRef = (0, _react.useRef)(null);\n  var sizes = {\n    s: s,\n    m: m,\n    l: l,\n    xl: xl\n  };\n  var classes = {\n    col: true\n  };\n\n  _constants.default.SIZES.forEach(function (size) {\n    classes[size + sizes[size]] = sizes[size];\n  });\n\n  (0, _react.useEffect)(function () {\n    var instance = M.Autocomplete.init(autocompleteRef.current, options);\n    return function () {\n      instance && instance.destroy();\n    };\n  }, [options]);\n  return /*#__PURE__*/_react.default.createElement(\"div\", {\n    className: (0, _classnames.default)('input-field', className, classes)\n  }, icon && (0, _react.cloneElement)(icon, {\n    className: 'prefix'\n  }), /*#__PURE__*/_react.default.createElement(\"input\", _extends({\n    className: \"autocomplete\",\n    type: \"text\",\n    ref: autocompleteRef,\n    id: id\n  }, rest)), /*#__PURE__*/_react.default.createElement(\"label\", {\n    htmlFor: id\n  }, title));\n};\n\nvar autocompleteOptions = _propTypes.default.shape({\n  /**\n   * Data object defining autocomplete options with optional icon strings.\n   */\n  data: _propTypes.default.objectOf(_propTypes.default.string),\n\n  /**\n   * Limit of results the autocomplete shows.\n   */\n  limit: _propTypes.default.number,\n\n  /**\n   * Callback for when autocompleted.\n   */\n  onAutocomplete: _propTypes.default.func,\n\n  /**\n   * \tMinimum number of characters before autocomplete starts.\n   */\n  minLength: _propTypes.default.number,\n\n  /**\n   * Sort function that defines the order of the list of autocomplete options.\n   */\n  sortFunction: _propTypes.default.func\n});\n\nexports.autocompleteOptions = autocompleteOptions;\nAutocomplete.propTypes = {\n  /**\n   * Uniquely identifies <input> generated by this component\n   * Used by corresponding <label> for attribute\n   * @default idgen()\n   */\n  id: _propTypes.default.string,\n  className: _propTypes.default.string,\n\n  /**\n   * The title of the autocomplete component.\n   */\n  title: _propTypes.default.string,\n\n  /**\n   * Optional materialize icon to add to the autocomplete bar\n   */\n  icon: _propTypes.default.node,\n  s: _propTypes.default.number,\n  m: _propTypes.default.number,\n  l: _propTypes.default.number,\n  xl: _propTypes.default.number,\n\n  /**\n   * Placeholder for input element\n   * */\n  placeholder: _propTypes.default.string,\n\n  /**\n   * Called when the value of the input gets changed - by user typing or clicking on an auto-complete item.\n   * Function signature: (event, value) => ()\n   */\n  onChange: _propTypes.default.func,\n\n  /**\n   * The value of the input\n   */\n  value: _propTypes.default.string,\n\n  /**\n   * Options for the autocomplete\n   * <a target=\"_blank\" rel=\"external\" href=\"https://materializecss.com/autocomplete.html#options</a>\n   */\n  options: autocompleteOptions\n};\nAutocomplete.defaultProps = {\n  id: \"Autocomplete-\".concat((0, _idgen.default)()),\n  options: {\n    data: {},\n    limit: Infinity,\n    onAutocomplete: null,\n    minLength: 1,\n    sortFunction: null\n  }\n};\nvar _default = Autocomplete;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}